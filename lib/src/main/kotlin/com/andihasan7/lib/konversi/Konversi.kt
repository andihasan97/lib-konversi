/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */

/*
 * This file is part of lib-konversi.
 *
 * lib-konversi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * lib-konversi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with lib-konversi.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
 
package com.andihasan7.lib.konversi

import kotlin.math.abs
import kotlin.math.round
import com.andihasan7.lib.konversi.round

class Konversi {
    
    /* 
    * PERHATIAN !!!
    *
    * > fungsi mengubah DMS ke Double (toDecimal), jika bernilai negatif,
    * wajib memasukkan tanda negatif (-) disetiap input DMS.
    * parameter second bisa menerima integer / double
    *
    * > semua fungsi mendukung nilai negatif
    */
    
    fun toDecimal(degree: Int, minute: Int, second: Number): Double {
    	val decimal = degree + (minute.toDouble() / 60) + (second.toDouble() / 3600)
    	return decimal
	}
    
    // jika true maka positif, jika false maka negatif
    fun toDecimalCheck(degree: Int, minute: Int, second: Number, check: Boolean): Double {
	    var decimal = degree + ((minute).toDouble() / 60) + ((second).toDouble() / 3600)
    
        if (check == true) {
    	    decimal
        } else {
    	    decimal = 0 - decimal
        }
    
        return decimal
    }
    
    /*
    * HH:MM detik dibulatkan ke menit, menit ke jam jika menit == 60,
    * positif/negatif : sama-sama dibulatkan keatas/kebawah (menjauhi nol)
    */
    fun toTime(decimal: Double): String {
        var time = abs(decimal).toInt().toString()
        var minute = ((abs(decimal) - time.toDouble()) * 60).toInt().toString()
        var second =
            (round((((abs(decimal) - time.toDouble()) * 60) - minute.toDouble()) * 60)).toInt().toString()

        // Tambahkan perhitungan untuk membulatkan detik ke menit & menit ke jam jika detik >= 30 & menit == 60
        if (second.toInt() >= 30) {
            minute = (minute.toInt() + 1).toString()
        }

        if (minute.toInt() == 60) {
            minute = (minute.toInt() - 60).toString()
            time = (time.toInt() + 1).toString()
        }

        // Tambahkan nol sebelum angka yang kurang dari 10
        time = time.padStart(2, '0')
        minute = minute.padStart(2, '0')

        if (decimal < 0) {
            time = "-$time"
        }

        return "$time:$minute"
    }
    
    // HH:MM:SS angka dibelakang koma orde detik tidak dibulatkan ke detik integer
    fun toTimeFull(decimal: Double): String {
        var time = abs(decimal).toInt().toString()
        var minute = ((abs(decimal) - time.toDouble()) * 60).toInt().toString()
        var second = ((((abs(decimal) - time.toDouble()) * 60) - minute.toDouble()) * 60).toInt().toString()

        // Tambahkan perhitungan untuk membulatkan detik ke menit & menit ke jam jika detik & menit == 60
        if (second.toInt() == 60) {
            second = (second.toInt() - 60).toString()
            minute = (minute.toInt() + 1).toString()
        }

        if (minute.toInt() == 60) {
            minute = (minute.toInt() - 60).toString()
            time = (time.toInt() + 1).toString()
        }

        // Tambahkan nol sebelum angka yang kurang dari 10
        time = time.padStart(2, '0')
        minute = minute.padStart(2, '0')
        second = second.padStart(2, '0')

        if (decimal < 0) {
            time = "-$time"
        }

        return "$time:$minute:$second"
    }
    
    // HH:MM:SS angka dibulatkan ke detik
    fun toTimeFullRound(decimal: Double): String {
        var time = abs(decimal).toInt().toString()
        var minute = ((abs(decimal) - time.toDouble()) * 60).toInt().toString()
        var second = (round((((abs(decimal) - time.toDouble()) * 60) - minute.toDouble()) * 60)).toInt().toString()

        // Tambahkan perhitungan untuk membulatkan detik ke menit & menit ke jam jika detik & menit == 60
        if (second.toInt() == 60) {
            second = (second.toInt() - 60).toString()
            minute = (minute.toInt() + 1).toString()
        }

        if (minute.toInt() == 60) {
            minute = (minute.toInt() - 60).toString()
            time = (time.toInt() + 1).toString()
        }

        // Tambahkan nol sebelum angka yang kurang dari 10
        time = time.padStart(2, '0')
        minute = minute.padStart(2, '0')
        second = second.padStart(2, '0')

        if (decimal < 0) {
            time = "-$time"
        }

        return "$time:$minute:$second"
    }
    
    // HH:MM:SS,ss dibulatkan ke 2 angka di belakang koma
    fun toTimeFullRound2(decimal: Double): String {
        var time = abs(decimal).toInt().toString()
        var minute = ((abs(decimal) - time.toDouble()) * 60).toInt().toString()
        var second =
            ((((abs(decimal) - time.toDouble()) * 60) - minute.toDouble()) * 60).round(2).toString()

        // Tambahkan nol sebelum angka yang kurang dari 10
        time = time.padStart(2, '0')
        minute = minute.padStart(2, '0')
        second = second.padStart(2, '0')

        if (decimal < 0) {
            time = "-$time"
        }

        return "$time:$minute:$second"
    }
    
    // HH j MM m SS,ss d dibulatkan ke 2 angka di belakang koma
    fun toCounterTimeRound2(decimal: Double): String {
        var time = abs(decimal).toInt().toString()
        var minute = ((abs(decimal) - time.toDouble()) * 60).toInt().toString()
        var second =
            ((((abs(decimal) - time.toDouble()) * 60) - minute.toDouble()) * 60).round(2).toString()

        // Tambahkan nol sebelum angka yang kurang dari 10
        time = time.padStart(2, '0')
        minute = minute.padStart(2, '0')
        second = second.padStart(4, '0')

        if (decimal < 0) {
            time = "-$time"
        }

        return "$time j $minute m $second d"
    }
    
    // DD째 MM` SS``angka dibelakang koma orde detik tidak dibulatkan ke detik integer
    fun toDegreeFull(decimal: Double): String {
    	var degree = abs(decimal).toInt().toString()
    	var minute = ((abs(decimal) - degree.toDouble()) * 60).toInt().toString()
    	var second = ((((abs(decimal) - degree.toDouble()) * 60) - minute.toDouble()) * 60).toInt().toString()

        // Tambahkan nol sebelum angka yang kurang dari 10
        degree = degree.padStart(2, '0')
        minute = minute.padStart(2, '0')
        second = second.padStart(2, '0')
        
        if (decimal < 0) {
            degree = "-$degree"
        }

    	return "$degree\u00B0 $minute\u2032 $second\u2033"
	}
    
    
    // DD째 MM` SS`` angka dibulatkan ke detik
    fun toDegreeFullRound(decimal: Double): String {
    	var degree = abs(decimal).toInt().toString()
    	var minute = ((abs(decimal) - degree.toDouble()) * 60).toInt().toString()
    	var second = (round((((abs(decimal) - degree.toDouble()) * 60) - minute.toDouble()) * 60)).toInt().toString()
        
        // Tambahkan perhitungan untuk membulatkan detik ke menit & menit ke jam jika detik & menit == 60
    	if (second.toDouble() == 60.0) {
        	second = (second.toInt() - 60).toString()
        	minute = (minute.toInt() + 1).toString()
    	}

    	if (minute.toInt() == 60) {
        	minute = (minute.toInt() - 60).toString()
        	degree = (degree.toInt() + 1).toString()
    	}

        // Tambahkan nol sebelum angka yang kurang dari 10
        degree = degree.padStart(2, '0')
        minute = minute.padStart(2, '0')
        second = second.padStart(2, '0')
        
        if (decimal < 0) {
            degree = "-$degree"
        }

    	return "$degree\u00B0 $minute\u2032 $second\u2033"
	}
	
    
    // DD째 MM` SS,ss`` dibulatkan ke 2 angka di belakang koma
	fun toDegreeFullRound2(decimal: Double): String {
    	var degree = abs(decimal).toInt().toString()
    	var minute = ((abs(decimal) - degree.toDouble()) * 60).toInt().toString()
    	var second = ((((abs(decimal) - degree.toDouble()) * 60) - minute.toDouble()) * 60).round(2).toString()

        // Tambahkan nol sebelum angka yang kurang dari 10
        degree = degree.padStart(2, '0')
        minute = minute.padStart(2, '0')
        second = second.padStart(2, '0')
        
        if (decimal < 0) {
            degree = "-$degree"
        }

    	return "$degree\u00B0 $minute\u2032 $second\u2033"
	}
    
    /*
        catatan yang belum ada adalah toDegree,
        DD째 MM` detik dibulatkan ke menit,
        mungkin tidak akan saya tambahkan mengingat
        jarang sekali dipakai untuk keperluan falak
        karena keperluan falak menuntut format lengkap 
    */
    
}
